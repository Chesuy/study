#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <stdlib.h>

int main()    //登陆 密码正确显示成功，密码错误显示错误，三次错误后退出程序。
{
	int i = 0;
	char password[] = { 0 };
	for (i = 0; i < 3; i++)
	{
		printf("请输入密码:>");
		scanf("%s", password);
		if (strcmp(password, "123456") == 0)//比较两个字符串要用库函数-strcmp
		{
			printf("登陆成功\n");
			break;
		}
		else
		{
			printf("密码错误\n");
		}
	}
	if (3 == i)
		printf("三次密码错误，退出程序\n");
	return 0;
}
//int main()  //多个字符从两端往中间靠拢显示
//{
//	char arr1[] = "welcome to china!!!";
//	char arr2[] = "                    ";
//	int left = 0;
//		//int right = sizeof(arr1) / sizeof(arr1[0] - 2);
//	int right = strlen(arr1) - 1;
//	while (left <= right)
//	{
//		arr2[left] = arr1[left];
//		arr2[right] = arr1[right];
//		printf("%s\n", arr2);
//		Sleep(1000);//休息1秒
//		system("cls");//执行系统命令函数-cls-清空屏幕
//		left++;
//		right--;
//	}
//	printf("%s\n", arr2);
//	return 0;
//}
//int main()  //有序数组找数进阶版（折半查找/二分查找）
//{
//	int arr[] = { 1,2,3,4,5,6,8,8,9,10 };
//	    int n = 0;
//		int sz = sizeof(arr) / sizeof(arr[0]);		
//		while (n>=0)
//		{
//			printf("请输入1—%d   ", sz);
//			scanf("%d", &n);
//			int left = 0;
//			int right = sz - 1;
//			while(left<=right)
//			{
//				int mid = (left + right) / 2;
//				if (arr[mid] > n)
//				{
//					right = mid - 1;
//				}
//				else if (arr[mid] < n)
//				{
//					left = mid + 1;
//				}
//				else
//				{
//					printf("找到了,下标是:%d\n", mid);
//					break;
//                }
//			}
//			if (n > sz)
//				printf("输入错误");
//			if (left > right)
//			{
//				printf("找不到\n");
//			}
//		}
//	
//	return 0;
//}
//int main()   //有序数组找数初级
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int n = 0;
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	while (n>=0)
//	{
//		printf("请输入1—%d   ", sz);
//		scanf("%d", &n);
//		for (i = 0; i < sz; i++)
//		{
//			if (n == arr[i])
//			{
//				printf("找到了,下标是%d\n", i);
//				break;
//			}
//		}
//		if (n > sz)
//			printf("输入错误");
//		if (i == sz)
//			printf("找不到\n");
//	}
//
//	return 0;
//}
//int main()    //n的阶乘和进阶版
//{
//	int i = 0;
//	int n = 0;
//	int ret = 1;
//	int sum = 0;
//	for (n = 1; n <= 3; n++)
//	{
//		ret = ret*n;
//		
//		sum = sum + ret;
//	}
//	//scanf("%d", &n);
//	//for (i = 1; i <= n; i++)
//	//{
//	//	ret = ret * i;
//	//}
//	printf("sum=%d\n", sum);
//
//	return 0;
//}
//int main()  // n的阶乘和初级
//{
//	int i = 0;
//	int n = 0;
//	int ret = 1;
//	int sum = 0;
//	for (n = 1; n <= 3; n++)
//	{
//		ret = 1;
//		for (i = 1; i <= n; i++)
//		{
//			ret = ret * i;
//		}
//		sum = sum + ret;
//	}
//	//scanf("%d", &n);
//	//for (i = 1; i <= n; i++)
//	//{
//	//	ret = ret * i;
//	//}
//	printf("sum=%d\n", sum);
//
//	return 0;
//}
//int main()   // 计算n的阶乘
//{
//	int i = 0;
//	int n = 0;
//	int ret = 1;
//	scanf("%d", &n);  
//	for (i = 1; i <= n; i++)
//	{
//		ret = ret * i;
//	}
//	printf("ret=%d\n", ret);
//
//	return 0;
//}
//int main()
//{
//	
//	int a = 10;
//	scanf("%d",&a);
//	//printf("hehe\n");
//
//	return 0;
//}
