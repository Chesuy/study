#define _CRT_SECURE_NO_WARNINGS 1
#include<stdlib.h>
#include<stdio.h>
#include<errno.h>
#include<string.h>


//////////文件
// 
//什么是文件：
//    磁盘上的文件是文件。
//    但是在程序设计中，我们一般谈的文件有两种：程序文件、数据文件。
// 
// 程序文件：包含源程序文件（后缀为.c）、目标文件（windows环境后缀为.obj）、可执行程序（windows环境后缀为.exe）。
// 
// 数据文件：文件的内容不一定是程序，而是程序运行时读写的数据。比如程序运行需要从中读取数据的文件，或者输出内容的文件。
//
//文件名：一个文件要有一个唯一的文件标识，以使用户识别和引用。
//        文件名包含3部分：文件路径+文件名主干+文件后缀
//        例如：c:\code\test.txt
//        为了方便起见，文件标识常被称为文件名。
//
//文件类型：根据数据的组织形式，数据文件被称为文本文件或者二进制文件。
//          数据在内存中以二进制的形式存储，如果不加转换的输出到外存，就是二进制文件。
//          如果要求在外存上以ASCII码的形式存储，则需要在存储前转换。以ASCII字符的形式存储的文件就是文本文件。
//
// 数据在内存中的存储：
//       字符一律以ASCII码的形式存储，数值型数据既可以用ASCII形式存储，也可以用二进制形式存储。
//       如有整数10000，如果以ASCII码的形式输出到磁盘，则磁盘中占用5个字节（10000每个字符一个字节），
//       而以二进制形式输出，则在磁盘上只占4个字节（10 27 00 00）。
// 
// 文件缓冲区：
//     ANSIC标准采用“缓冲文件系统”处理的数据文件的，所谓缓冲文件系统是指系统自动地在内存中为程序中每一个正在使用的文件开辟一块“文件缓冲区”。
//     从内存向磁盘输出数据会先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘上。如果从磁盘向计算机读入数据，则从磁盘文件中读取数据输入到内存
//     缓冲区（充满缓冲区），然后再从缓冲区逐个地将数据送到程序数据区（程序变量等）。缓冲区的大小根据C编译系统决定的。
//   
//                       输出缓冲区  --->输出----->
//       程序数据区                                   磁盘
//                       输入缓冲区  <---输入<----
//
// 文件指针：
//     缓冲文件系统中，关键的概念是“文件类型指针”，简称“文件指针”。
//     每个被使用的文件都在内存中开辟了一个相应的文件信息区，用来存放文件的相关信息（如文件的名字，文件状态及文件当前的位置等）。
//     这些信息是保存在一个结构体变量中的，该结构体类型是有系统声明的，取名FILE。
// 
//     不同的C编译器的FILE类型包含的内容不完全相同，但是大同小异。
//     每当打开一个文件的时候，系统会根据文件的情况自动创建一个FILE结构的变量，并充填其中的信息，使用者不必关心细节。
//     一般都是通过一个FILE的指针来维护这个FILE结构的变量，这样使用起来更加方便。
// 
//     例如创建一个FILE*的指针变量：FILE* pf;
//     定义pf是一个指向FILE类型数据的指针变量，可以使pf指向某个文件的文件信息取（是一个结构体变量），通过该文件信息区中的信息
//     就能够访问该文件，也就是说，通过文件指针变量能够找到与它关联的文件。
// 
// 文件的打开和关闭： 文件在读写之前应该先打开文件，在使用结束之后应该关闭文件。
//     在编写程序的时候，在打开文件的同时，都会返回一个FILE*的指针变量指向该文件，也相当于建立了指针和文件的关系。
//     ANSIC规定使用fopen函数来打开文件，fclose来关闭文件。
//              FILE* fopen（const char* filename,const char* mode）;
//              int fclose（FILE* stream）;
// 打开方式如下：
//     文件使用方式        含义                                           如果指定文件不存在
//     “r”（只读）       为了输入数据，打开一个已经存在的文件文本       出错
//     “w”（只写）       为了输出数据，打开一个文件文件                 建立一个新的文件
//     “a”（追加）       向文本文件尾添加数据                           出错
//     “rb”（只读）      为了输入数据，打开一个二进制文件               出错
//     “wb”（只写）      为了输出数据，打开一个二进制文件               建立一个新的文件
//     “ab”（追加）      向一个二进制文件尾添加数据                     出错
//     “r+”（读写）      为了读和写，打开一个文本文件                   出错
//     “w+”（读写）      为了读和写，建立一个新的文件                   建立一个新的文件
//     “a+”（读写）      打开一个文件，在文件尾进行读写                 建立一个新的文件
//     “rb+”（读写）     为了读和写，打开一个二进制文件                 出错
//     “wb+”（读写）     为了读和写，新建一个二进制文件                 建立一个新的文件
//     “ab+”（读写）     打开一个二进制文件，在文件尾进行读和写         建立一个新的文件

//int main()
//{
//	//打开文件test.txt
//	
//	//相对路径：
//	//..表示上一级路径
//	//. 表示当前路径
//	//fopen("../../test.txt","r");
//	//fopen("test.txt","r");
//
//	//绝对路径：
//	//fopen("I:\\vs_2019\\vs2019file\\test_9_11\\test.txt", "r");
//	FILE* pf = fopen("test.txt", "r");
//	if (pf == NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//	return 0;
//}


// 文件的顺序读写：
//     功能               函数名      适用于
//     字符输入函数       fgetc       所有输入流
//     字符输出函数       fputc       所有输出流
//     文本行输入函数     fgets       所有输入流
//     文本行输出函数     fputs       所有输出流
//     格式化输入函数     fscanf      所有输入流
//     格式化输出函数     fprintf     所有输出流
//     二进制输入         fread       文件
//     二进制输出         fwrite      文件


//int main()
//{
//	FILE* pfWrite = fopen("test.txt", "w");
//	if (pfWrite == NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//	//写文件
//	fputc('w', pfWrite);
//	fputc('o', pfWrite);
//	fputc('r', pfWrite);
//	fputc('l', pfWrite);
//	fputc('d', pfWrite);
//
//	//关闭文件
//	fclose(pfWrite);
//	pfWrite = NULL;
//	return 0;
//}


//int main()
//{
//	FILE* pfRead = fopen("test.txt", "r");
//	if (pfRead == NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//	//读文件
//	printf("%c", fgetc(pfRead));
//	printf("%c", fgetc(pfRead));
//	printf("%c", fgetc(pfRead));
//	printf("%c", fgetc(pfRead));
//	printf("%c", fgetc(pfRead));
//
//	//关闭文件
//	fclose(pfRead);
//	pfRead = NULL;
//	return 0;
//}


// 从键盘输入
// 输出到屏幕
// 键盘&屏幕都是外部设备
// 
// 键盘--标准输入设备--stdin
// 屏幕--标准输出设备--stdout
// 键盘和屏幕是一个程序默认打开的两个流设备
// 
// stdin FILE*
// stdout FILE*
// stderr FILE*
//

//int main()
//{
//	int ch = fgetc(stdin);//从标准输入流读取一个
//	fputc(ch, stdout); //输出一个到标准输出流
//
//	return 0;
//}

//int main()
//{
//	char buf[1024] = { 0 };
//	FILE* pf = fopen("test.txt", "w");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	//写一行文件
//	fputs("hello\n", pf);
//
//	//再写一行
//	fputs("world\n", pf);
//
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//int main()
//{
//	char buf[1024] = { 0 };
//	FILE* pf = fopen("test.txt", "r");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	//读一行文件
//	fgets(buf, 1024, pf);
//	//printf("%s", buf);
//	puts(buf);  //向标准输出设备(屏幕)写字符串并换行
//	//再读一行
//	fgets(buf, 1024, pf);
//	//printf("%s", buf);
//	puts(buf);
//
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//int main()
//{
//	//从键盘读取一行文本信息
//	char buf[1024] = { 0 };
//	fgets(buf, 1024, stdin);//从标准输入流读取一行
//	fputs(buf, stdout);//输出一行到标准输出流
//
//	gets(buf);
//	puts(buf);
//
//	return 0;
//}

//struct S
//{
//	int n;
//	float score;
//	char arr[10];
//};
//int main()
//{
//	struct S s = { 100,3.14,"world" };
//	//格式化的形式写文件
//	FILE* pf = fopen("test.txt", "w");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	fprintf(pf, "%d %f %s", s.n, s.score, s.arr);
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//struct S
//{
//	int n;
//	float score;
//	char arr[10];
//};
//int main()
//{
//	//格式化的形式读文件
//	struct S s = { 0 };
//	FILE* pf = fopen("test.txt", "r");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	fscanf(pf, "%d %f %s", &(s.n), &(s.score), s.arr);
//	printf("%d %f %s", s.n, s.score, s.arr);
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//struct S
//{
//	int n;
//	float score;
//	char arr[10];
//};
//int main()
//{
//	struct S s = { 0 };
//	fscanf(stdin, "%d %f %s", &(s.n), &(s.score), s.arr);//从标准输入流读文件（格式化）
//	fprintf(stdout, "%d %.2f %s", s.n, s.score, s.arr);  //从标准输出流写文件（格式化）
//
//	return 0;
//}

//struct S
//{
//	int n;
//	float score;
//	char arr[10];
//};
//int main()
//{
//	struct S s = { 100,2.22f,"abcde" };
//	struct S tmp = { 0 };
//	char buf[1024] = { 0 };
//	//把格式化的数据转换成字符串存储到buf
//	sprintf(buf, "%d %f %s", s.n, s.score, s.arr);
//	printf("%s\n", buf);
//	//从buf中读取格式化的数据到tmp中
//	sscanf(buf, "%d %f %s", &(tmp.n), &(tmp.score), tmp.arr);
//	printf("%d %f %s\n", tmp.n, tmp.score, tmp.arr);
//	return 0;
//}

//  scanf/printf  是针对标准输入流/标准输出流的 格式化输入/输出语句
// fscanf/fprintf 是针对所有输入流/所有输出流的 格式化输入/输出语句
// sscanf/sprintf 是从字符串中读取格式化的数据/把格式化数据写入到字符串

//struct S
//{
//	char name[20];
//	int age;
//	double score;
//};
//int main()
//{
//	struct S s = { "张三",20,88.8 };
//	FILE* pf = fopen("test.txt", "wb");
//	if (pf == NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//	//二进制的形式写文件
//	fwrite(&s, sizeof(struct S), 1, pf);
//
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//struct S
//{
//	char name[20];
//	int age;
//	double score;
//};
//int main()
//{
//	struct S s = { 0 };
//	FILE* pf = fopen("test.txt", "rb");
//	if (pf == NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//	//二进制的形式读文件
//	fread(&s, sizeof(struct S), 1, pf);
//	printf("%s %d %lf\n", s.name, s.age, s.score);
//
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}



// 文件的随机读写：
//     fseek：根据文件指针的位置和偏移量来定位文件指针。
//            int fseek(FILE* stream, long int offset, int origin);
//                          文件指针           偏移量     文件指针的当前位置
//                                                        SEEK_CUR 文件指针的当前位置
//                                                        SEEK_END文件的末尾位置         
//                                                        SEEK_SET文件的起始位置
//     ftell：返回文件指针相对于起始位置的偏移量。
//            long int ftell(FILE* stream);
//     rewind：让文件指针的位置回到文件的起始地址
//            void rewind(FILE* stream);
//

//int main()
//{
//	FILE* pf = fopen("test.txt", "w");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	fputs("abcdef\n", pf);
//	fclose(pf);
//	pf = NULL;
//
//	FILE* ps = fopen("test.txt", "r");
//	if (ps == NULL)
//	{
//		return 0;
//	}
//	//定位文件指针
//	fseek(ps, 4, SEEK_SET);
//	//读取文件
//	int ch = fgetc(ps);
//	printf("%c\n", ch);
//	//返回偏移量
//	int pos = ftell(ps);
//	printf("%d\n", pos);
//	//让偏移量回到起始地址
//	rewind(ps);
//
//    pos = ftell(ps);
//	printf("%d\n", pos);
//
//	fclose(ps);
//	ps = NULL;
//	return 0;
//}


//    文件结束判断
// 被错误使用的feof：牢记 在文件读取过程中，不能用feof函数的返回值直接用来判断文件是否结束。
//                        而是应用于当文件读取结束的时候，判断是读取失败结束，还是遇到文本尾结束。
// 1.文本文件读取是否结束，判断返回值是否为EOF（fgetc）,或者NULL（fgets）。
//       fgetc判断是否为EOF     fgets判断返回值是否为NULL
// 2.二进制文件的读取结束判断，判断返回值是否小于实际要读的个数。
//       fread判断返回值是否小于实际要读的个数

//int main()
//{
//	int c = 0;
//	FILE* pf = fopen("test.txt", "r");
//	if (!pf)
//	{
//		//perror==printf("%s\n",strerror(error));
//		perror("file opening failed");
//		return 0;
//	}
//	//fgetc当读取失败或者遇到文件结束的时候，都会返回EOF
//	while ((c = fgetc(pf)) != EOF)
//	{
//		putchar(c);
//	}
//	//判断结束原因
//	if (ferror(pf))
//		puts("I/O error when reading");
//	else if (feof(pf))
//		puts("end of file reached successfully");
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

int main()
{
	FILE* pf = fopen("test.txt", "r");
	if (!pf)
	{
		perror("open file test.txt");
		return 0;
	}
	//读文件
	int ch = 0;
	while ((ch = fgetc(pf)) != EOF)
	{
		putchar(ch);
	}
	//判断结束原因
	if (ferror(pf))
	{
		printf("error\n");
	}
	else if (feof(pf))
	{
		printf("end of file\n");
	}
	fclose(pf);
	pf = NULL;
	return 0;
}
